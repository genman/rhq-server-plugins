<?xml version="1.0" encoding="UTF-8" ?>

<generic-plugin name="aggregate-alert"
                displayName="Alert:Aggregate"
                description="Alerts on aggregate metrics for resources and groups."
                package="com.apple.iad.rhq.alert.aggregate"
                version="1.0"
                apiVersion="2.0"
                disabledOnDiscovery="true"
                xmlns="urn:xmlns:rhq-serverplugin.generic"
                xmlns:serverplugin="urn:xmlns:rhq-serverplugin"
                xmlns:c="urn:xmlns:rhq-configuration">

    <serverplugin:help><![CDATA[
          Alerts on resource or group metrics, traits, and availability. This provides
          support for an alerting feature RHQ does not currently have.
          <p>
          Usage: Tag resources or groups using the following convention:
          <pre>
          'alert:' func '(' metric op value ')' [ ',' time 'm' ] [ ',' ('Low' | 'Medium' | 'High' ) ]
          </pre>
          <dl>
              <dt> <code>func</code> </dt>
              <dd> one of: <code>sum avg min max avail range rangep unique</code>, or for
              yesterday/week comparisons: <code>sumd sumw avgd avgw percd perw</code>.
              Suffixed 'd' means compare with same interval yesterday; 'w'
              means compare the same interval from a day 7 days ago. <code>avail</code>
              checks the number of resources currently marked as available.
              <code>range</code> evaluates the max and min of values the
              metric in the group, then alerts if max - min is above or below
              this amount. <code>rangep</code> calculates <i>(max - min) / avg</i>, which
              is the variation in terms of percentage. <code>unique</code> compares traits across
              resources; the value returned is the size of the set of unique values.
              <code>percd</code> compares current hour -1 with previous day's same hour
              Note that <code>avail</code>, <code>sum</code>, <code>range</code>, and <code>unique</code>
              does not work for individual resources.
              </dd>
              <dt> <code>metric</code> </dt>
              <dd> the name of the metric for the resource type: e.g.
              <code>NumberCommandsInQueue</code>, or for 'avail' the metric
              is either <code>percent</code> (as a decimal, 0-1.0), or <code>count</code>
              as the number of hosts. Refer to the plugin.xml file for the name to use.
              (Partial matches are okay.)
              </dd>
              <dt> <code>op</code> </dt>
              <dd> one of &lt; or &gt;</dd>
              <dt> <code>value</code> </dt>
              <dd>a numeric value, parsed as double,
              representing the absolute value suffixed with the measurement unit, or for comparisons a percentage
              represented as a ratio. For example <code>0.5</code> means 50%. <code>50MB</code> means 50 MB
              </dd>
              <dt> <code>time</code> </dt>
              <dd>is a numeric value, parsed as a integer,
              meaning the amount of time to aggregate over. Currently
              only minutes 'm' are supported.
              </dd>
              <dt> <code>Low, Medium, High</code> </dt>
              <dd>Indicates the priority. Medium is the default. Case-sensitive.
              </dd>
          </dl>
          <p>
          Example: <code>alert:avg(NumberCommandsInQueue>100.0MB),5m</code>
          means for this metric, if the average value is over 100MB for the past
          5 minutes, alert.
          <p>
          Example: <code>alert:max(totalSize>10.0MB),5m, High</code>
          means for this metric, if the max value is over 10MB for the past
          5 minutes, alert with High priority
          <p>
          Example: <code>alert:avgd(NumberCommandsInQueue>1.1),30m</code>
          means for this metric, if the average value today was 10% over
          the same 30 minute period yesterday, alert.
          <p>
          Example: <code>alert:avail(percent < 0.5)</code>
          means for this group, if less than half the servers are up,
          alert.
          <p>
          Example: <code>alert:range(NumberCommandsInQueue > 10)</code>
          means for this group, if the values are (15, 20, 30), the range
          is 15, so alert.
          <p>
          Example: <code>alert:rangep(NumberCommandsInQueue > 0.3)</code>
          means for this group, if the values are (18, 20, 22), the range
          percentage is 4/20 = 0.2, which is less than 0.3, so do not alert.
          <p>
          Example: <code>alert:unique(version > 1)</code>
          means for this group, if the values are (1.3, 1.3, 1.2), the unique
          amount is 2, which is greater than 1, so alert.
          <p>
          <p>
          Example: <code>alert:percd(spend > 75)</code>
          means for this resource, if the values are (75.0, 75.0, 75.0) for particular hour in a day,
          value of yesterday for the same hour is taken and the formula used for firing alert is
          if  ((today-yesterday)/yesterday)*100 > 75, then fire an alert
          <p>
          Implementation notes:
          <ul>
              <li>Tags are only applicable on compatible resource groups and are removed if found on resources.</li>
              <li>Tags that have the wrong syntax are removed.</li>
              <li>Evaluation always happens every 5 minutes for all metrics, sequentially.
              Sequential processing is probably okay as most aggregate queries finish very quickly (like a fraction of a second.)
              </li>
              <li>Changing a tag may create orphan metrics definitions.
              These are unlikely to cause trouble if they accumulate, however. They can always be deleted from the UI.
              </li>
              <li>Sums are computed by taking the metric average and multiplying by the current size of the group.
              (It is not a true sum.) Adding and removing resources should not affect the estimate.
              </li>
              <li>There are many assumptions. One is that metrics are actually being gathered for every
              active resource, and also that they are being captured more frequently than the window.
              If there are NaNs or no values found, these are logged
              as warnings. (Should they appear as RHQ alerts? RHQ should have a mechanism to trap if
              no metrics are being gathered.)
              </li>
              <li>Sums are computed by taking the metric average and
              multiplying by the current size of the group.  (It is not a true
              sum.) Adding and removing resources should not affect the
              estimate.
              </li>
              <li>There are many assumptions. One is that metrics are actually being gathered for every
              active resource, and also that they are being captured more frequently than the window.
              If there are NaNs or no values found, these are logged
              as warnings. (Shouldn't they appear as seperate alerts?)
              </li>
          </ul>
          TODO list:
          <ul>
              <li>Schedule adjustment. If a metric is only queried every 30 minutes, look back 30 minutes more.</li>
              <li>Turn this into a real UI feature.</li>
              <li>Cleanup orphan alert definitions.</li>
              <li>Concurrency support.</li>
          </ul>
    ]]></serverplugin:help>

    <serverplugin:plugin-component class="TagProcess">
        <serverplugin:control name="trigger" description="Triggers invocation of this plugin. Useful for testing.">
        </serverplugin:control>
    </serverplugin:plugin-component>

    <serverplugin:scheduled-jobs>

        <c:map-property name="process" description="Processes tagged resource groups">
            <c:simple-property name="scheduleType" type="string" required="true" readOnly="true" default="cron" summary="true" />
            <!--             S M H Day Mon Weekday [Year] -->
            <c:simple-property name="scheduleTrigger" type="string" required="true"
                    default="0 0/5 * * * ?" summary="true" description="Quartz Cron expression; runs every 5 mins"/>
            <c:simple-property name="concurrent" type="boolean" required="true" readOnly="true" default="false" summary="true"
                    description="Whether or not the job can be run multiple times concurrently"/>
        </c:map-property>

    </serverplugin:scheduled-jobs>

    <!-- custom global config -->
    <serverplugin:plugin-configuration>
        <c:simple-property units="minutes" type="integer" default="15" name="window" required="true"
          description="Default time window when looking at aggregate stats"/>
           <c:simple-property units="hours" type="integer" default="1" name="gobackhours" required="true"
          description="Default hour to go back when looking at aggregate stats"/>
        <c:simple-property type="boolean" default="true" name="nan" required="true"
          description="Alert if NaN values are found. This means that no metrics are being pulled."/>
        <c:simple-property type="string" default="auto" name="subject" required="false"
          description="Acknowledge alert if condition does not hold true anymore; null to not acknowledge alert"/>
    </serverplugin:plugin-configuration>

</generic-plugin>
